version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.5.0
  aws-ecs: circleci/aws-ecs@1.0.0
  aws-s3: circleci/aws-s3@1.0.11
  jira: circleci/jira@1.0.6
  slack: circleci/slack@3.4.1

jobs:
  build:
    docker:
      - image: thebiggive/donate-frontend-ci:latest

    working_directory: ~/donate

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package-lock.json" }}

      - run: npm install --quiet

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package-lock.json" }}

      - run: npm run ci

  deploy-staging-static:
    docker:
      # This image's base Node version must match that used in the *root* `Dockerfile` (not the one in this directory)
      # which is the basis for ECS app builds. Otherwise the two builds will have different output hashes and the
      # dynamic app will reference static files that don't exist.
      - image: circleci/node:12

    steps:
      - checkout

      - run: npm install --quiet

      - run: npm run build:staging

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-staging-donate-static/d'
          arguments: |
            --acl public-read \
            --cache-control "max-age=31536000"
          overwrite: false  # Leave previous versions in tact (don't `--delete`)

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-staging-donate-static/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          overwrite: false  # Leave previous versions in tact (don't `--delete`)

  deploy-regression-static:
    docker:
      # This image's base Node version must match that used in the *root* `Dockerfile` (not the one in this directory)
      # which is the basis for ECS app builds. Otherwise the two builds will have different output hashes and the
      # dynamic app will reference static files that don't exist.
      - image: circleci/node:12

    steps:
      - checkout

      - run: npm install --quiet

      - run: npm run build:regression

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-regression-donate-static/d'
          arguments: |
            --acl public-read \
            --cache-control "max-age=31536000"
          overwrite: false  # Leave previous versions in tact (don't `--delete`)

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-regression-donate-static/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          overwrite: false  # Leave previous versions in tact (don't `--delete`)

  deploy-production-static:
    docker:
      # This image's base Node version must match that used in the *root* `Dockerfile` (not the one in this directory)
      # which is the basis for ECS app builds. Otherwise the two builds will have different output hashes and the
      # dynamic app will reference static files that don't exist.
      - image: circleci/node:12

    steps:
      - checkout

      - run: npm install --quiet

      - run: npm run build:production

      - aws-s3/sync:
          from: dist/browser
          to: 's3://tbg-production-donate-static/d'
          arguments: |
            --acl public-read \
            --cache-control "max-age=31536000"
          overwrite: false  # Leave previous versions in tact (don't `--delete`)

      - aws-s3/sync:
          from: dist/browser/assets
          to: 's3://tbg-production-donate-static/assets'
          arguments: |
            --acl public-read \
            --cache-control "max-age=86400"
          overwrite: false  # Leave previous versions in tact (don't `--delete`)

workflows:
  build:
    jobs:
      - build:
          post-steps:
            - jira/notify:
                job_type: build
                environment_type: development

  deploy-regression:
    jobs:
      - deploy-regression-static:
          filters:
            branches:
              only:
                - develop
      - aws-ecr/build-and-push-image:
          requires:
            - deploy-regression-static
          extra-build-args: '--build-arg BUILD_ENV=regression'
          repo: '${AWS_ECR_REPO_NAME}'
          region: AWS_REGION
          tag: 'regression,regression-${CIRCLE_SHA1}'
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          aws-region: '${AWS_REGION}'
          family: 'tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster-name: 'tbg-regression-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          container-image-name-updates: 'container=donate,tag=regression-${CIRCLE_SHA1}'
          post-steps:
            - slack/notify-on-failure: ~

  deploy-staging:
    jobs:
      - deploy-staging-static:
          filters:
            branches:
              only:
                - develop
      - aws-ecr/build-and-push-image:
          requires:
            - deploy-staging-static
          extra-build-args: '--build-arg BUILD_ENV=staging'
          repo: '${AWS_ECR_REPO_NAME}'
          region: AWS_REGION
          tag: 'staging,staging-${CIRCLE_SHA1}'
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          aws-region: '${AWS_REGION}'
          family: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster-name: 'tbg-staging-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          container-image-name-updates: 'container=donate,tag=staging-${CIRCLE_SHA1}'
          post-steps:
            - jira/notify:
                job_type: deployment
                environment_type: staging
            - slack/notify:
                color: '#009900'
                message: 'We use rolling blue/green deploys. All visitors to staging will see the updated app version within ~20 minutes.'
                title: 'Staging: Donate frontend deployed!'
                title_link: 'https://donate-staging.thebiggivetest.org.uk'
            - slack/notify-on-failure: ~

  deploy-production:
    jobs:
      - deploy-production-static:
          filters:
            branches:
              only:
                - master
      - aws-ecr/build-and-push-image:
          requires:
            - deploy-production-static
          extra-build-args: '--build-arg BUILD_ENV=production'
          repo: '${AWS_ECR_REPO_NAME}'
          region: AWS_REGION
          tag: 'production,production-${CIRCLE_SHA1}'
      - aws-ecs/deploy-service-update:
          requires:
            - aws-ecr/build-and-push-image
          aws-region: '${AWS_REGION}'
          family: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          cluster-name: 'tbg-production-${AWS_REGION}-${AWS_ECS_SERVICE_SUFFIX}'
          container-image-name-updates: "container=donate,tag=production-${CIRCLE_SHA1}"
          post-steps:
            - jira/notify:
                job_type: deployment
                environment_type: production
            - slack/notify:
                color: '#009900'
                message: 'We use rolling blue/green deploys. All visitors to production will see the updated app version within ~20 minutes.'
                title: 'Production: Donate frontend deployed!'
                title_link: 'https://donate.thebiggive.org.uk'
            - slack/notify-on-failure: ~
